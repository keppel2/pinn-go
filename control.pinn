func main ( )
{
	valA := 747;
	if (valA == 474) { print("bad"); } else if (valA == 747) { print(valA); } else { print("worse"); }
	fo i int = 0; i < 5; i = i + 1 {
		print (i );
	}
	j int = 3 ;
	wh j > 0 {
		j = j - 1 ;
		print (j );
	}
	k string = "foo" ;
	switch k {
	case "foo":
		print ("bar" );
	case "baz":
		print ("bad" );
	}
	if k == "foo" {
		print ("good" );
	}
	if k == "baz" { print ("bad") ; } else { print (k) ; }
	x int = 5 ;
	wh x < 100 {
		x = x + 1 ;
		if x > 42 {
			break;
		}
	}
	print (x);
	fo i = 20; i > 10; i = i - 1 {
		if i > 15 {
			continue;
		}
		print (i);
	}
	switch true {
	case 5 > 2:
		break;
		print ("bad");
	}
	switch 5 {
	case 2:
		print ("bad");
	default:
		print ("default");
	}
	switch true {
	case 4 > 1:
		print ("first");
		fallthrough;
	case 1 > 4:
		print ("keep going");
	case false:
		print ("stop falling");
	}
	switch true {
	case true:
		print ("first");
		fallthrough;
		print ("bad");
	case false:
		print ("fell through");
		fallthrough;
	default:
		print ("fell through default");
	}
	print("tern");
	iTernary int;
	iTernary = true ? 10 : 5;
	print (iTernary);
	iTernary = false ? print("bad") : 5;
	print (iTernary);
	iTernary = true ? true ? 23 : 11 : 3;
	print(iTernary);

	m [map]char ;
	m["a"] = 'B';
	m["bad"] = 'X';

	key string;
	value char;
	fo key, value = range m {
	if key == "bad" {
		continue;
	}
	print (key);
	print (value);
	}

	key2 int;
	val2 int;
	arr [fill]int = 10, 15, 20;
	fo key2, val2 = range arr {
	print(key2);
	print(val2);
	}

	fo key2, val2 = range (101:105) {
	print(val2);
	}

	ar [fill]int = 1, 7, 8;
	v [slice]int;
	v = ar[0:2];
	print(ar);
	doArray(ar);
	print(ar);
	print(v);
	doSlice(v);
	print(v);


	switch 5 {
	case 1, 5, void():
		print ("Multi case");
	}

}
func doSlice(s [slice]int) {
	s[0] = 12;
}

func doArray(v [3]int) {
	v[0] = 23;
}

func void() int { print ("checking redundant case"); return 42;}
